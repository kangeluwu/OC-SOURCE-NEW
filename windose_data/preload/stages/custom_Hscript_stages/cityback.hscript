var Emitter;
var dancers;
var dancers2;
var flashed;
var loki;
var loki2;
var loki3;
var funni;
var time = ['','Night','midNight'];
var time2s = ['','MidNight'];
var doIdle = true;
var lmao = null;
var shaderValue = null;
var distortionTime = 0.0;
var lightCity;
var city2nd;
var cityBack;
var cityMid;
var susCam;
var noteCam;
var wiggleShit;
var charCam;
var theqwo;
var bgMM;
var theqwo2;
var doTrolling = if (curSong.toLowerCase() == "manic-evanescent") true; else false;
function createShaderSprite(shader){
    var sprite = new FlxSprite().makeGraphic(FlxG.width*1.5,FlxG.height*1.5);

    var shader = currentPlayState.createRuntimeShader(shader);
    sprite.shader = shader;
    sprite.shader.data.curPower.value = [1];
    return sprite;
}
function onCreatePost(song){
    if (doTrolling){
    addHaxeLibrary('CustomFadeTransition');
    
    susCam = new FlxCamera();
    FlixG.cameras.add(susCam);
    noteCam = new FlxCamera();
    FlixG.cameras.add(noteCam);
    charCam = new FlxCamera();
    FlixG.cameras.add(charCam);
    var subCam = new FlxCamera();
    FlixG.cameras.add(subCam);
    camerabgAlphaShits(susCam);
    camerabgAlphaShits(noteCam);
    camerabgAlphaShits(charCam);
    camerabgAlphaShits(subCam);
    wiggleShit = new WiggleEffect();
    wiggleShit.waveAmplitude = 0.07;
    wiggleShit.effectType = WiggleEffectType.DREAMY;
    wiggleShit.waveFrequency = 0;
    wiggleShit.waveSpeed = 1.8; // fasto
    wiggleShit.shader.uTime.value = [200 / FlxG.height]; // from 4mbr0s3 2

    var susWiggle = new ShaderFilter(wiggleShit.shader);
    susCam.setFilters([susWiggle]);
for (sustains in currentPlayState.unspawnNotes)
    {
        if (sustains.isSustainNote)
            sustains.cameras = [susCam];
        else
            sustains.cameras = [noteCam];
    }

    CustomFadeTransition.nextCamera = subCam;
  //  currentPlayState.dadGroup.cameras = [charCam,camGame];
 //   currentPlayState.boyfriendGroup.cameras = [charCam,camGame];
}
}
function onPauseCreate(){
    
}
function start(song) {
    var the = time[0];
    var the2 = time2s[0];
switch (curSong){
    case 'Manic-Evanescent':
        the = time[1];
        the2 = time2s[1];
        case 'Demonic':
            the = time[2];
            the2 = time2s[1];
            case 'Shachath':
            the = time[2];
            the2 = time2s[1];
}
    bg = new FlxSprite(-200, -200).loadGraphic(hscriptPath + 'bg' + the + '.png');
    bg.setGraphicSize(Std.int(bg.width * 1.3));
    bg.scrollFactor.set(0.4, 0.4);
    bg.antialiasing = true;
    addSprite(bg, BEHIND_ALL);

    var bgLayer = new FlxSprite(-200, -200).loadGraphic(hscriptPath + 'bg' + the + 'Layer.png');
    bgLayer.setGraphicSize(Std.int(bgLayer.width * 1.3));
    bgLayer.scrollFactor.set(0.4, 0.4);
    bgLayer.antialiasing = true;
    if (the != time[0]){
    bgLayer.shader = currentPlayState.createRuntimeShader('star');
    bgLayer.shader.data.curPower.value = [1];
    }
    bgLayer.blend = currentPlayState.blendModeFromString('screen');

    addSprite(bgLayer, BEHIND_ALL);

    city = new FlxSprite(-380, -500).loadGraphic(hscriptPath + 'city.png');
    city.setGraphicSize(Std.int(city.width * 1.3));
    city.scrollFactor.set(0.5, 0.5);
    city.antialiasing = true;
    city.updateHitbox();
    addSprite(city, BEHIND_ALL);

    cityBack = new FlxSprite(-200, -220).loadGraphic(hscriptPath + 'cityBack' + the + '.png');
    cityBack.setGraphicSize(Std.int(cityBack.width * 1.2));
    cityBack.scrollFactor.set(0.6, 0.6);
    cityBack.antialiasing = true;
    cityBack.updateHitbox();
    addSprite(cityBack, BEHIND_ALL);

    lightCity = new FlxSprite(-200, -220).loadGraphic(hscriptPath + 'light' + the + '.png');
    lightCity.setGraphicSize(Std.int(lightCity.width * 1.2));
    lightCity.scrollFactor.set(0.6, 0.6);
    lightCity.antialiasing = true;
    lightCity.updateHitbox();
    
    addSprite(lightCity, BEHIND_ALL);
    
    cityMid = new FlxSprite(-200, -260).loadGraphic(hscriptPath + 'cityMid' + the2 + '.png');
    cityMid.setGraphicSize(Std.int(cityMid.width * 1.2));
    cityMid.scrollFactor.set(0.75, 0.75);
    cityMid.antialiasing = true;
    cityMid.updateHitbox();
    addSprite(cityMid, BEHIND_ALL);


    city2nd = new FlxSprite(-280, -320).loadGraphic(hscriptPath + 'cityFront' + the2 + '.png');
    city2nd.setGraphicSize(Std.int(city2nd.width * 1.2));
    city2nd.scrollFactor.set(0.8, 0.8);
    city2nd.antialiasing = true;
    city2nd.updateHitbox();
    addSprite(city2nd, BEHIND_ALL);

    loki = new FlxSprite(-300, -200).makeGraphic(1280 * 2, 720 * 2, 0xFF000000);
    loki.alpha = 0.0001;
    loki.scrollFactor.set();
    addSprite(loki, BEHIND_ALL);

    var fire = new FlxSprite(-380, -600).loadGraphic(hscriptPath + 'lights.png');
    fire.setGraphicSize(Std.int(fire.width * 1.5));
    fire.scrollFactor.set(0.8, 0.8);
    fire.updateHitbox();
    fire.antialiasing = true;
    if (the == time[2])
    addSprite(fire, BEHIND_ALL); 


if (the == time[2]){
 var shader = currentPlayState.createRuntimeShader('desaturation');
 fire.shader = shader;
 shaderValue = shader.get_shaderData();
 shaderValue.desaturationAmount.value = [1];


 shaderValue.amplitude.value = [0.005];
 shaderValue.frequency.value = [10];
}
if (the != time[0]){
    var path='e3';
    if (the == time[2])
        path='e4';
    Emitter = new FlxEmitter(0, 920);
FlxPexParser.parse(FNFAssets.getText(hscriptPath + "particles/" + path +".pex"),FNFAssets.getBitmapData(hscriptPath + "particles/texture.png"),Emitter,1);
			addSprite(Emitter, BEHIND_ALL);
Emitter.color.set(RedColor, RedColor, RedColor, RedColor);
Emitter.angle.set(90, 90, 0, 0);
Emitter.launchAngle.set(-90, -90);
Emitter.acceleration.set(0, 0);

var thelmao = new FlxEmitter(-700, 800);
			FlxPexParser.parse(FNFAssets.getText(hscriptPath + "particles/" + path +".pex"),FNFAssets.getBitmapData(hscriptPath + "particles/texture.png"),thelmao,1);
			addSprite(thelmao,BEHIND_ALL);
            thelmao.start(false,.02);

}
    grass = new FlxSprite(-380, -700).loadGraphic(hscriptPath + 'grass' + the + '.png');
    grass.setGraphicSize(Std.int(grass.width * 1.5));
    grass.scrollFactor.set(0.85, 0.85);
    grass.updateHitbox();
    grass.antialiasing = true;
    addSprite(grass, BEHIND_ALL);



if (the != time[0]){
    var path='e';
    if (the == time[2])
        path='e2';
    var thelmao = new FlxEmitter(-700, -100);
			FlxPexParser.parse(FNFAssets.getText(hscriptPath + "particles/" + path +".pex"),FNFAssets.getBitmapData(hscriptPath + "particles/texture.png"),thelmao,1);
			addSprite(thelmao);
            thelmao.cameras = [camGame];
            thelmao.start(false,.02);
            
              
            lmao = thelmao;
          
}
    if (curSong == "Demonic"){
    dancers = new FlxGroup();
	var bootex = FlxAtlasFrames.fromSparrow(hscriptPath + 'dancers.png',hscriptPath + 'dancers.xml');
    for (i in 0...10) {

        var boogie = new MetroSprite((-370 * i) + 1220, PlayState.instance.boyfriendGroup.y + 220, false);
        boogie.frames = bootex;
        boogie.setGraphicSize(Std.int(boogie.width * 1.65));
        boogie.animation.addByIndices('danceLeft', 'bg dancer sketch PINK', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "", 24, false);
        boogie.animation.addByIndices('danceRight', 'bg dancer sketch PINK', [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "", 24, false);
        boogie.animation.play('danceLeft', false);
        boogie.antialiasing = true;
        boogie.scrollFactor.set(0.8, 0.8);
        boogie.alpha = 0.0001;
        dancers.add(boogie);
    }
    addSprite(dancers, BEHIND_ALL);
    dancers2 = new FlxGroup();
	var bootex2 = FlxAtlasFrames.fromSparrow(hscriptPath + 'limoDancer.png',hscriptPath + 'limoDancer.xml');
    for (i in 0...10) {
        var boogie = new MetroSprite((-370 * i) + 1240, PlayState.instance.boyfriendGroup.y + 200, false);
        boogie.frames = bootex2;
        boogie.setGraphicSize(Std.int(boogie.width * 1.65));
        boogie.animation.addByIndices('danceLeft', 'bg dancer sketch', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "", 24, false);
        boogie.animation.addByIndices('danceRight', 'bg dancer sketch', [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "", 24, false);
        boogie.animation.play('danceLeft', false);
        boogie.antialiasing = true;
        boogie.scrollFactor.set(0.8, 0.8);
        boogie.alpha = 0.0001;
        dancers2.add(boogie);

    }
    addSprite(dancers2, BEHIND_ALL);
    }
    else
    {
        dancers = null;
    }
    PlayState.instance.opponentCameraOffset[1] += 120;

    PlayState.instance.boyfriendGroup.y += 40;
    flashed = new Character(PlayState.instance.boyfriendGroup.x + 150, PlayState.instance.boyfriendGroup.y - 40, "dad-d1-player",true);
    addSprite(flashed, BEHIND_ALL);
    flashed.alpha = 0.0001;
    flashed.color = 0x404040;
    flashed.playAnim('idle', true);

    bgMM = new FlxSprite(-300, -200).makeGraphic(1280 * 2, 720 * 2, 0xFF000000);
    bgMM.alpha = 0.0001;
    bgMM.scrollFactor.set();
    addSprite(bgMM,BEHIND_ALL);

    loki2 = new FlxSprite(-300, -200).makeGraphic(1280 * 2, 720 * 2, 0xFF000000);
    loki2.alpha = 0.0001;
    loki2.cameras = [camHUD];
    loki2.scrollFactor.set();
    insert(currentPlayState.members.indexOf(currentPlayState.strumLineNotes), loki2);
    funni = new FlxSprite().loadGraphic(hscriptPath + 'stageoverlay.png');
    funni.scrollFactor.set();
    funni.screenCenter();
    funni.cameras = [camHUD2];
    funni.antialiasing = true;
    if (the != time[0])
    funni.alpha = 0.4;
    else
        funni.alpha = 0.0001;    
    funni.setGraphicSize(Std.int(funni.width * 1.15));
    addSprite(funni, BEHIND_NONE);
    loki3 = new FlxSprite(-300, -200).makeGraphic(1280 * 2, 720 * 2, 0xFFFFFFFF);
    loki3.alpha = 0.0001;
    loki3.cameras = [camHUD];
    loki3.scrollFactor.set();
    insert(currentPlayState.members.indexOf(currentPlayState.strumLineNotes), loki3);

    theqwo = createShaderSprite('SUPERPOGGERNG');
    theqwo.screenCenter();
    theqwo.blend = currentPlayState.blendModeFromString('add');
    theqwo.shader.data.iTime.value = [1];
    theqwo.scrollFactor.set();
    theqwo.alpha = 0.0001;

    theqwo2 = createShaderSprite('Simulatedsmoke');
    theqwo2.screenCenter();

    theqwo2.shader.data.iTime.value = [1];
    theqwo2.scrollFactor.set();
    theqwo2.alpha = 0.0001;
    add(theqwo2);
    add(theqwo);
setDefaultZoom(0.9);
camGame.setFilters([]);
currentPlayState.camZooming = true;
}

var yes = false;
function beatHit(beat)
{    
    if (curSong.toLowerCase() == "manic-evanescent"){
        if (curStep >= 128 && curStep < 384)
            {
                if (beat % 2 == 0){
                currentPlayState.triggerEventNote("Add Camera Zoom", "0.05", "0.025", "");
                currentPlayState.triggerEventNote("chromToggle", "0.05", "0.025", "0.5");
                }
            }

            if (curStep >= 384 && curStep < 632)
                {

                    currentPlayState.triggerEventNote("Add Camera Zoom", "0.05", "0.025", "");
                    currentPlayState.triggerEventNote("chromToggle", "0.05", "0.025", "0.5");
                    
                }

                if (curStep >= 1024 && curStep < 1280)
                    {
                        if (beat % 2 == 0){
                        currentPlayState.triggerEventNote("Add Camera Zoom", "0.05", "0.025", "");
                        
                        }
                    }

                    if (curStep >= 1280 && curStep < 1528)
                        {
        
                            if (beat % 2 == 0){
                                currentPlayState.triggerEventNote("Add Camera Zoom", "0.05", "0.025", "");
                                currentPlayState.triggerEventNote("chromToggle", "0.05", "0.025", "0.5");
                                }
                            
                        }
    }
    if (curSong == "Demonic"){
    if (beat % 4 == 0) {

        if (yes){
        Emitter.start(false,.02);
        currentPlayState.triggerEventNote("Set Lights", "in", "", "");
    }
    if ((curStep >= 896 && curStep <= 1280) || (beat >= 320 && beat <= 331)){
        camHUD2.flash(OGcolor, 0.5, null, true);
        currentPlayState.triggerEventNote("Add Camera Zoom", "0.05", "0.025", "");
    }
}    if (beat % 2 == 0) {

    if ((curStep >= 188 && curStep <= 350) || (beat >= 332 && beat <= 376))
        currentPlayState.triggerEventNote("Add Camera Zoom", "0.2", "0.1", "");


    }



    if ((beat >= 88 && beat < 92) || (beat >= 96 && beat <= 125) || (beat >= 128 && beat <= 154) || (beat >= 160 && beat <= 214) || (beat >= 376 && beat <= 380)
        || (beat >= 384 && beat <= 412) || (beat >= 416 && beat <= 430) || (beat >= 432 && beat <= 444) || (beat >= 448 && beat <= 502)|| (beat >= 512 && beat <= 566) 
        || (beat >= 576 && beat <= 607) || (beat >= 624 && beat <= 630))
        currentPlayState.triggerEventNote("Add Camera Zoom", "0.2", "0.1", "");

    if ((beat >= 288 && beat < 303) || (beat >= 304 && beat < 319))
        currentPlayState.triggerEventNote("Add Camera Zoom", "", "", "");
}
    if (dancers != null){
    dancers.forEach(function (spr) {
    spr.dance(beat);
});
dancers2.forEach(function (spr) {
    spr.dance(beat);
});
    }
    if (beat % 2 == 0 && doIdle){
        flashed.playAnim('idle', true);
        }
    doIdle = true;
}

var a = 0;
function update(elapsed)
{
    if (doTrolling){
		wiggleShit.waveAmplitude = FlxMath.lerp(wiggleShit.waveAmplitude, 0, Conductor.stepCrochet  / 1000);
		wiggleShit.waveFrequency = FlxMath.lerp(wiggleShit.waveFrequency, 0, Conductor.stepCrochet  / 1000);
		wiggleShit.update(elapsed);
    susCam.zoom = camHUD.zoom;
    noteCam.zoom = camHUD.zoom;
    susCam.alpha = camHUD.alpha;
    noteCam.alpha = camHUD.alpha;
    }
    a += elapsed * 45;
    lightCity.alpha = 1 - Math.sin((Math.PI * a) / 90);
    if (shaderValue!= null){
        shaderValue.distortionTime.value = [distortionTime];
        distortionTime -= ((elapsed / (1 / 160)) * 0.0125) * 2;
    }
    theqwo.shader.data.curPower.value = [theqwo.alpha];
    theqwo.shader.data.iTime.value = [a / 45];
    theqwo2.shader.data.curPower.value = [theqwo.alpha];
    theqwo2.shader.data.iTime.value = [a / 45];
}

function stepHit(step)
{
    if (curSong.toLowerCase() == "manic-evanescent"){
        switch (step){
            case 684:
                loki2.cameras = [charCam];
                FlxTween.tween(loki2, {alpha:1}, 1);
                case 704:
        
                    boyfriend.color = BlackColor;
                    funni.alpha = 0.8;
                    dad.color = BlackColor;
                    FlxTween.tween(loki2, {alpha:0.0001}, 1);
                    case 960:
                        FlxTween.tween(loki2, {alpha:1}, 1);
                        case 992:
                            boyfriend.color = OGcolor;
                            funni.alpha = 0.0001;
                            dad.color = OGcolor; 
                            case 1020:     
                                loki2.alpha = 0.0001;
                                camHUD.alpha = 0.0001;
                                bgMM.alpha = 1;
                                currentPlayState.boyfriendGroup.alpha = 0.0001;
                                funni.alpha = 0.4;
                            case 1024:   
                                
                                currentPlayState.boyfriendGroup.alpha = 1;
                                currentPlayState.boyfriendMap.get('dadc').alpha = 0.0001;
                                camHUD.alpha = 1;
                                bgMM.alpha = 0.0001;
                                charCam.flash(OGcolor,1);
                                case 1528:   
                                    currentPlayState.isCameraOnForcedPos = true;
                                    FlxTween.tween(currentPlayState.boyfriendGroup, {x:currentPlayState.boyfriendGroup.x + 800}, 0.8, {ease: FlxEase.cubeInOut});
                                    FlxTween.tween(currentPlayState.dadGroup, {x:currentPlayState.dadGroup.x - 800}, 0.8, {ease: FlxEase.cubeInOut});
                                    case 1536:   
                                        charCam.flash(OGcolor,1);
                                        theqwo.alpha = 1;
                                        theqwo2.alpha = 1;
                                    FlxTween.tween(currentPlayState.boyfriendGroup, {x:currentPlayState.BF_X}, 0.8, {ease: FlxEase.cubeOut});
                                    FlxTween.tween(currentPlayState.dadGroup, {x:currentPlayState.DAD_X}, 0.8, {ease: FlxEase.cubeOut});
                                      currentPlayState.dadGroup.cameras = [charCam];
 currentPlayState.boyfriendGroup.cameras = [charCam];
                        case 1660:   
    FlxTween.tween(currentPlayState.boyfriendGroup, {x:currentPlayState.boyfriendGroup.x + 800}, 0.8, {ease: FlxEase.cubeIn});
                                    FlxTween.tween(currentPlayState.dadGroup, {x:currentPlayState.dadGroup.x - 800}, 0.8, {ease: FlxEase.cubeIn});
                                    case 1664:              
                                        
                                        charCam.flash(OGcolor,1);
                                        theqwo.alpha = 0.0001;
                                        theqwo2.alpha = 0.0001;         
                                        case 1668:      
                                            currentPlayState.dadGroup.cameras = [camGame];
                                            currentPlayState.boyfriendGroup.cameras = [camGame];     
                                            FlxTween.tween(currentPlayState.boyfriendGroup, {x:currentPlayState.BF_X}, 0.8, {ease: FlxEase.cubeOut});
                                            FlxTween.tween(currentPlayState.dadGroup, {x:currentPlayState.DAD_X}, 0.8, {ease: FlxEase.cubeOut,
                                                onComplete: function(twn)
                                                {
                                                    currentPlayState.isCameraOnForcedPos = false;
                                                }});

        }
    }
    if (curSong == "Demonic"){
    if (curStep % 2 == 0) {

        if ((curStep >= 368 && curStep <= 374) || (curStep >= 864 && curStep <= 875) || (curStep >= 1520 && curStep <= 1526)
            || (curStep >= 2016 && curStep <= 2027) || (curStep >= 2016 && curStep <= 2027) || (curStep >= 2028 && curStep <= 2048) || (curStep >= 2272 && curStep <= 2282)
            || (curStep >= 2528 && curStep <= 2540) )
            currentPlayState.triggerEventNote("Add Camera Zoom", "0.2", "0.1", "");
        }
        if ((curStep >= 876 && curStep <= 895) || (curStep >= 2284 && curStep <= 2304) || (curStep >= 2540 && curStep <= 2559) )
        currentPlayState.triggerEventNote("Add Camera Zoom", "0.2", "0.1", "");

        if (curStep == 376)
            loki2.alpha = 1;

        if (curStep == 384){
            loki2.alpha = 0.0001;
            camHUD2.flash(OGcolor, 0.5, null, true);
        }

        if (curStep == 632)
            FlxTween.tween(loki3, {alpha:1}, 0.5,{onComplete: function(twn)
                {
    
                    setDefaultZoom(0.85);
                }});

        if (curStep == 624)
            FlxTween.num(currentPlayState.vocals.volume, 0.25, 0.5);

        if (curStep == 636){
            FlxTween.num(currentPlayState.vocals.volume, 1, 0.5);
        }
        if (curStep == 640)
            loki3.alpha = 0.0001;

        if (curStep == 896){
            camHUD2.flash(BlackColor, 1, null, true);
        }
        if (curStep == 2048){
            FlxTween.tween(funni, {alpha:1}, 1);
        }
        if (curStep == 2560){
            camHUD2.flash(OGcolor, 3, null, true);
        }
        if (curStep == 2640){
            loki2.cameras = [camHUD2];
            FlxTween.tween(loki2, {alpha:1}, 6);
            FlxTween.tween(camHUD, {alpha:0}, 6);
        }
    }
}
var singAnims = ["singLEFT", "singDOWN", "singUP", "singRIGHT"];
var doflash = false;
var uhTimer = null;
function goodNoteHit(id, direction, noteType, isSustainNote, note)
    {             currentPlayState.camZooming = true; 
        if (!currentPlayState.opponentPlayer){
            doflash = true;
            if (uhTimer ==null){
                uhTimer = new FlxTimer().start(0.5, function(tmr:FlxTimer)
                    {
                        doFlashing();
                    });
                }
                else{
                    uhTimer.reset();
                }
        if (noteType == 'No Animation')
       {
        if (dancers != null){
            dancers.forEach(function (spr) {
            spr.alpha = 0.0001;
        });
        dancers2.forEach(function (spr) {
            spr.alpha = 1;
        });
            }
            currentPlayState.health += 0.4;
        flashed.alpha = 0.8;
        doIdle = false;
    flashed.playAnim(singAnims[direction], true);
    
                }
            }
    }
    function opponentNoteHit(id, direction, noteType, isSustainNote, note)
        {            currentPlayState.camZooming = true; 
            if (currentPlayState.opponentPlayer){
                
            if (noteType == 'No Animation')
           {
            if (dancers != null){
                dancers.forEach(function (spr) {
                spr.alpha = 0.0001;
            });
            dancers2.forEach(function (spr) {
                spr.alpha = 1;
            });
                }
                
            flashed.alpha = 0.8;
            doIdle = false;
        flashed.playAnim(singAnims[direction], true);
        doFlashing();
                    }
                }
        }
    var tween - null;
    function doFlashing()
        {
            
if (tween != null) tween.cancel();
tween = FlxTween.tween(flashed, {alpha: 0.001}, 2, {onComplete: function(twn)
    {
        tween = null;
    }});

        }

        var ogZoom = currentPlayState.defaultCamZoom;
function onEvent(name, value1, value2, value3)
    {
    switch (name){
        case 'chromToggle':
            var zooms = Std.parseFloat(value1) / 8;
            FlxG.camera.zoom +=zooms;
            camHUD.zoom +=zooms/2;
        case 'Set Cam Zoom':
            var zooms = Std.parseFloat(value1);
					var time = Std.parseFloat(value2);
                    if(Math.isNaN(zooms)) zooms = defaultCamZoom;
					if(Math.isNaN(time)) time = Conductor.stepCrochet * 4 / 1000;

                    FlxTween.tween(currentPlayState, {defaultCamZoom: zooms}, time, {ease: FlxEase.cubeInOut});     
                    case 'Add Camera Zoom':
                    if (doTrolling){
                    wiggleShit.waveAmplitude = 0.035;
                    wiggleShit.waveFrequency = 50;
                    }
           /*        for (stuffer in currentPlayState.strumLineNotes.members){
                        var x = stuffer.x;
                        var y = stuffer.y;
                        var angleOG = stuffer.angle;
                        var angle = FlxG.random.float(1, 180);
                        stuffer.angle = angle;
                        var troll = FlxAngle.asRadians(stuffer.angle);
                        stuffer.x += FlxG.random.float(-troll, troll) * 120;
                        stuffer.y += FlxG.random.float(-troll, troll) * 120;

                        FlxTween.tween(stuffer, {x: x, y: y, angle:angleOG}, Conductor.stepCrochet * 4 / 1000, {ease: FlxEase.cubeInOut});     
                    }*/
    case 'Set Lights':
    
    var chars = [PlayState.instance.boyfriend, PlayState.instance.gf, PlayState.instance.dad];
    
    if (value1 == 'true' ){
    var color = RedColor;
    FlxG.camera.flash(OGcolor, 0.5, null, true);
    for (who in chars)
    {
        who.color = color;
    }
    
    if (dancers != null){
        dancers.forEach(function (spr) {
        spr.color = color;
    });
    dancers2.forEach(function (spr) {
        spr.color = color;
    });
        }
    grass.color = color;
    loki.alpha = 1;
    Emitter.alpha.set(1, 1, 0,0);
    Emitter.color.set(color, color);
    yes = true;
    }
    
    if (value1 == 'in' ){
    var color = RedColor;
    for (who in chars)
    {
        who.color = color;
    }
    
    if (dancers != null){
        dancers.forEach(function (spr) {
        spr.color = color;
    });
    dancers2.forEach(function (spr) {
        spr.color = color;
    });
        }
    grass.color = color;
    loki.alpha = 1;
    Emitter.alpha.set(1, 1, 0,0);

    Emitter.color.set(color, color);
    
    }
    
    if (value1 == 'false'){
    
    for (who in chars)
    {
        who.color = OGcolor;
    }
    if (dancers != null){
        dancers.forEach(function (spr) {
        spr.color = OGcolor;
    });
    dancers2.forEach(function (spr) {
        spr.color = OGcolor;
    });
        }
    grass.color = color;
    loki.alpha = 0.001;
    Emitter.alpha.set(0, 0, 0,0);
    Emitter.color.set(OGcolor, OGcolor);
    FlxG.camera.flash(OGcolor, 0.5, null, true);
    yes = false;
    }

    
    }
    
    }
